# EBPL-DS: Cracking the Market Code with AI-Driven Stock Prediction

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# Step 1: Fetch stock data
stock_symbol = 'AAPL'  # You can change this to any stock symbol
data = yf.download(stock_symbol, start='2018-01-01', end='2024-12-31')

# Display sample data
print(data.head())

# Step 2: Visualize the closing price history
plt.figure(figsize=(14, 5))
plt.plot(data['Close'], label=f'{stock_symbol} Closing Price')
plt.title(f'{stock_symbol} Closing Price History')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.legend()
plt.show()

# Step 3: Prepare data for LSTM
close_data = data['Close'].values.reshape(-1, 1)

# Normalize the data (LSTM benefits from scaled data)
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(close_data)

# Split data into training and testing sets
train_size = int(len(scaled_data) * 0.8)
train_data = scaled_data[:train_size]
test_data = scaled_data[train_size:]

# Create a function to convert data into time series sequences
def create_dataset(dataset, time_step=60):
    X, y = [], []
    for i in range(len(dataset) - time_step - 1):
        X.append(dataset[i:(i + time_step), 0])
        y.append(dataset[i + time_step, 0])
    return np.array(X), np.array(y)

time_step = 60
X_train, y_train = create_dataset(train_data, time_step)
X_test, y_test = create_dataset(test_data, time_step)

# Reshape input to be 3D [samples, time steps, features]
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test  = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

# Step 4: Build the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Step 5: Train the model
history = model.fit(X_train, y_train, epochs=50, batch_size=64, validation_data=(X_test, y_test), verbose=1)

# Step 6: Predict on test data
train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

# Inverse transform to get actual prices
train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler.inverse_transform(test_predict)

# Inverse scaling for y_train and y_test
y_train_actual = scaler.inverse_transform([y_train])
y_test_actual  = scaler.inverse_transform([y_test])

# Step 7: Visualize predictions
plt.figure(figsize=(14, 5))
plt.plot(data.index[time_step:train_size], scaler.inverse_transform(train_data[time_step:]), label='Training Actual')
plt.plot(data.index[train_size+time_step+1:], scaler.inverse_transform(test_data[time_step+1:]), label='Test Actual')
plt.plot(data.index[time_step:train_size], train_predict, label='Training Prediction')
plt.plot(data.index[train_size+time_step+1:], test_predict, label='Test Prediction')
plt.title(f'{stock_symbol} Stock Price Prediction with LSTM')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.legend()
plt.show()
